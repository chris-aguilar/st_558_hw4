---
title: "ST558 HW4: Advanced Functions, API Calls"
author: "Chris Aguilar"
format: html
editor: visual
---

## Introduction

This assignment covers Summer 2024's ST 558 HW4. We'll cover some conceptual questions about R, some more function writing, and some API calls.

## Task 1: Conceptual Questions

  1.  What is the purpose of the lapply() function? What is the equivalent purrr function? 
  
  > The purpose of `lapply()` is to keep us from explicitly writing for-loops that return a list of results. The `purrr` equivalent is `map`.
  
  2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = "kendall") on each element of the list. Write code to do this below!
  
  > `lapply(my_list, cor, method = "kendall")`
  
  3. What are two advantages of using purrr functions instead of the BaseR apply family?
  
  > The two advantages are consistency between `purrr` functions (the function arguments are consistently named, preventing confusion, and the outputs are predictable from the function name) and the availability of additional helper functions within the map functions, allowing more compact code. For example, `~ . + 1` is equivalent to `function(x) x + 1`.
  
  4. What is a side effect function?
  
  > A side effect function is a function that doesn't transform its input into something else, but instead performs another action, like writing to disk or plotting something. So the input remains unchanged.
  
  5. Why can you name a variable sd in a function and not cause any issues with the sd function?
  
  > Any time you create a function and run it, it creates a temporary environment for the function. This temporary environment is what the function uses to look for variables by default before looking outside this environment. So a variable defined inside this temporary environment doesn't overwrite anything outside, and the temporary environment disappears once the function is done running.
  
## Task 2: Writing R Functions

We'll now write some common machine learning evaluation metric functions.

### RMSE

#### Step 1
First, Root Mean Squared Error (RMSE). This function will take a vector of responses and a vector of predictions, and will be able to handle missing values.

```{r rmse}

getRMSE <- function(responses, predictions, ...) {
  
  # squaring the difference between response and prediction
  sq_err <- (responses - predictions)^2
  
  # mean squared error, and allowing for additional arguments
  mse <- mean(sq_err, ...)
  
  # RMSE
  sqrt(mse)
}
```

#### Step 2

Let's test our `getRMSE` function. We'll create some toy data to do this, then run our function.

```{r test getRMSE}

# generating data
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

# testing RMSE function
getRMSE(resp, pred)
```

Now, we'll test how our function handles `NA` values. First we'll add two `NA` values to our responses. Then we'll run our function with and without accounting for `NA` values.

```{r test RMSE with NAs}

# NA to elements 1 and 3
resp[c(1, 3)] <- NA_real_

# test, no account for NAs
getRMSE(resp, pred) # returns NA

# account for NAs
getRMSE(resp, pred, na.rm = TRUE)
```
Our `getRMSE` function works as intended.

### MAE

#### Step 3

Now let's look at another common metric, mean absolute deviation (MAE). We'll follow the same approach as above, with a few minor changes to the mathematical steps.

```{r getMAE}

getMAE <- function(responses, predictions, ...) {
  
  # absolute difference between response and prediction
  abs_err <- abs(responses - predictions)
  
  # RMSE
  mean(abs_err, ...)
}

```

#### Step 4

As before, we'll create some toy data, test `getMAE`, replace two values in our responses with `NA_real_`, then check that our function can handle missing values with the `na.rm` argument passed to `mean` under the hood.

First, generate data and check that `getMAE()` works.

```{r test getMAE}

# toy data
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

# testing getMAE
getMAE(resp, pred)
```

Now we introduce missing values and show that `getMAE` can handle them.

```{r test getMAE with NAs}

# NA to elements 1 and 3
resp[c(1, 3)] <- NA_real_

# test getMAE, no account for NAs
getMAE(resp, pred)

# account for NAs
getMAE(resp, pred, na.rm = TRUE)

```
### Wrapper function

#### Step 5

We write a wrapper function using our MAE and RMSE helper functions above. We want it to return either or both metrics, with the outputs given appropriate names.

We should check our inputs are two numeric vectors, and by default, our function should return both MAE and RMSE.

```{r metrics wrapper fn}

getMetrics <- function(resp, pred, metric = "both", ...) {
  
  # input checks: first checking atomic, then vector, and finally, numeric
  if(!(is.vector(resp) & is.vector(pred))) stop("resp and pred should both be vectors")
  if(!(is.atomic(resp) & is.atomic(pred))) stop("resp and pred should both be atomic vectors")
  if(!(is.numeric(resp) & is.numeric(pred))) stop("resp and pred should both be numeric")
  
  
  # one more check to make sure our metric string is correct
  if(!(metric %in% c("both", "RMSE", "MAE"))) stop ("metric should be one of 'both', 'RMSE', 'MAE'")
  
  # checking for metric and giving results appropriately
  if(metric == "both") {
    
    res <- c(getRMSE(resp, pred, ...), getMAE(resp, pred, ...))
    names(res) <- c("RMSE", "MAE")
    
  } else if(metric == "RMSE") {
    
    res <- getRMSE(resp, pred, ...)
    names(res) <- "RMSE"
    
  } else {
    res <- getMAE(resp, pred, ...)
    names(res) <- "MAE"
  }
  
  # returning result
  res
}

```

#### Step 6

We now test our `getMetrics` function.

First, toy data, then we call it for each metric individually, then both.

```{r getMetrics toy data}

set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

# RMSE
getMetrics(resp, pred, metric = "RMSE")
# MAE
getMetrics(resp, pred, metric = "MAE")
# both
getMetrics(resp, pred, metric = "both")

```
Our function works so far.

Now, let's put in two NA values and ensure we can handle them in our function.

```{r getMetrics NA check}

# NA to elements 1 and 3
resp[c(1, 3)] <- NA_real_

# No NA accounting for
getMetrics(resp, pred)

# Account for NA
getMetrics(resp, pred, na.rm = TRUE)
```
Lastly, let's check that our function can check input types correctly. Also, because I'm a little OCD, I also include a check to ensure the `metric` argument is one of **"both", "RMSE", "MAE"**.

```{r getMetrics input checks}
# non-numeric input
try(getMetrics(resp, "a"))
# non-atomic input
try(getMetrics(resp, list(pred)))
# non-vector input
try(getMetrics(resp, iris))
# incorrect metric specification
try(getMetrics(resp, pred, metric = "foo"))
```

## Task 3: API Querying and Tidy-Style Function

Now we'll connect to the [News API.](https://newsapi.org) We'll need to register for an API key first before we can access news content programmatically.

We're first going to connect manually and ensure we can pull results. Then we'll create a function to do so.

### Step 1: Manual News API Call

We connect manually below. My wife is a big fan of Kendrick Lamar, so to impress her, I'm going to look up some results around him.

Rather than trying to manually create the url for the search, I feed different parts of the url reverse-engineered from looking at the examples on the News API's home page at the link above. I looked at the documentation's examples for `GET()` to figure out how to do the actions below.

```{r manual API search}

library(httr)

# probably not a best practice to hardcode API keys/authentication
api_key <- 'e73342687d7645ad9501d4b32acc40e6'

news_api_return <- GET(url = "https://newsapi.org/", 
                         path = "v2/everything", 
                         query = list(
                           q = "kendrick lamar not like us", 
                           apiKey = api_key,
                           from = '2024-06-19', 
                           sortBy = 'relevancy',
                           language = 'en')
  )
```

### Step 2: Parsing API Call Result

Now we parse the result of the API call for the data we care about.

```{r parsed api call}
parsed_result <- fromJSON(rawToChar(news_api_return$content))
str(parsed_result$articles)
```

We can see the manual API call works. Now let's make a function so we can do this process repeatedly.

### Step 3: News API Call function

For the function, we require a topic to search on, an API key, and a starting date range for our search. But for more advanced users, we also provide the option to add more query elements to really specify what they're looking for.

[See here for additional parameters to pass to the query.](https://newsapi.org/docs/endpoints/everything)

We'll call the function a few times to verify it does what we expect.

```{r news api function}

library(httr)
library(jsonlite)
library(tibble)

api_key <- 'e73342687d7645ad9501d4b32acc40e6'

getNews <- function(topic, api_key, start = NULL, ...) {
  
  # if no start date given, date range starts from yesterday
  if(is.null(start)) start <- Sys.Date() - 1
  
  query <- list(q = topic, apiKey = api_key, from = start, sortBy = "popularity", ...)
  
  news_api_return <- GET(url = "https://newsapi.org/", 
                         path = "v2/everything", 
                         query = query
  )
  
  parsed_result <- fromJSON(rawToChar(news_api_return$content))
  
  parsed_result$articles |> tibble::as_tibble()
}

getNews(topic = "kendrick lamar euphoria", api_key = api_key, start = '2024-06-01', language = 'en')
getNews(topic = "san francisco 49ers", api_key = api_key, start = '2024-06-01')

```

Our News API function call works!